import Papa from 'papaparse';
import { fetchWithRetry, getErrorMessage, logError, createFallbackData } from '../utils/errorHandler';

class NasaDataService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
  }

  // Clear expired cache entries
  clearExpiredCache() {
    const now = Date.now();
    for (const [key, value] of this.cache.entries()) {
      if (now - value.timestamp > this.cacheTimeout) {
        this.cache.delete(key);
      }
    }
  }

  // Clear all cache
  clearCache() {
    this.cache.clear();
    console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
  }

  async loadCityData(cityName, csvFileName = null) {
    // –ï—Å–ª–∏ csvFileName –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Ñ–∞–π–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    if (!csvFileName) {
      csvFileName = await this.findCityFile(cityName);
    }

    // Check cache first
    const cacheKey = `${csvFileName}_${cityName}`;
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', cityName);
        return cached.data;
      } else {
        this.cache.delete(cacheKey);
      }
    }

    try {
      const base = import.meta?.env?.BASE_URL || '/';
      const url = `${base.replace(/\/$/, '')}/nasa_weather_data/${csvFileName}`;
      
      const response = await fetchWithRetry(
        url,
        {},
        {
          maxRetries: 3,
          baseDelay: 500,
          onRetry: (attempt, maxRetries, delay, error) => {
            console.log(`Retrying data load for ${cityName} (${attempt}/${maxRetries}) after ${delay}ms. Error:`, error.message);
          }
        }
      );
      
      if (!response.ok) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${cityName}: ${response.statusText}`);
      }

      const csvText = await response.text();
      const data = await this.parseCSVData(csvText);
      
      // Cache the data with timestamp
      this.cache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è:', cityName);
      return data;
    } catch (error) {
      logError(error, `loadCityData-${cityName}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
      console.warn(`Using fallback data for ${cityName} due to loading error`);
      return [];
    }
  }

  async findCityFile(cityName) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = `cityFile_${cityName.toLowerCase()}`;
      if (this.cache.has(cacheKey)) {
        return this.cache.get(cacheKey);
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const normalizedCityName = this.normalizeCityName(cityName);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const possibleFileNames = this.generatePossibleFileNames(normalizedCityName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      for (const fileName of possibleFileNames) {
        try {
          const base = import.meta?.env?.BASE_URL || '/';
          const url = `${base.replace(/\/$/, '')}/nasa_weather_data/${fileName}`;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
          const response = await fetch(url, { method: 'HEAD' });
          if (response.ok) {
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, fileName);
            return fileName;
          }
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          continue;
        }
      }
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏–º—è
      const fallbackFileName = `nasa_weather_${normalizedCityName.replace(/ /g, '_')}_1999_2024.csv`;
      // –ö—ç—à–∏—Ä—É–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, fallbackFileName);
      return fallbackFileName;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
  normalizeCityName(cityName) {
    return cityName
      .trim()
      .replace(/\([^)]*\)/g, '') // –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      .replace(/['"]/g, '') // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
      .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
  generatePossibleFileNames(normalizedCityName) {
    const baseName = normalizedCityName.replace(/[^a-zA-Z0-9\s]/g, '').trim();
    const variants = [];
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    variants.push(`nasa_weather_${baseName.replace(/\s+/g, '_')}_1999_2024.csv`);
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –∑–∞–º–µ–Ω–æ–π –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    variants.push(`nasa_weather_${baseName.replace(/\s+/g, '_')}_1999_2024.csv`);
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    const words = baseName.split(/\s+/);
    if (words.length > 1) {
      // –°–æ–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
      variants.push(`nasa_weather_${words.join('_')}_1999_2024.csv`);
      
      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "City"
      if (!baseName.toLowerCase().includes('city')) {
        variants.push(`nasa_weather_${words.join('_')}_City_1999_2024.csv`);
      }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const specialCases = {
      'new york': 'nasa_weather_New_York_City_1999_2024.csv',
      'mexico city': 'nasa_weather_Mexico_City_1999_2024.csv',
      'los angeles': 'nasa_weather_Los_Angeles_1999_2024.csv',
      'buenos aires': 'nasa_weather_Buenos_Aires_1999_2024.csv',
      'haines junction': 'nasa_weather_Haines_Junction_1999_2024.csv',
      'puerto williams': 'nasa_weather_Puerto_Williams_1999_2024.csv',
      'port vila': 'nasa_weather_Port_Vila_1999_2024.csv',
      'nuku alofa': 'nasa_weather_Nuku_alofa_1999_2024.csv',
      'barrow utqiagvik': 'nasa_weather_Barrow_Utqiagvik_1999_2024.csv'
    };
    
    const lowerCityName = baseName.toLowerCase();
    if (specialCases[lowerCityName]) {
      variants.unshift(specialCases[lowerCityName]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(variants)];
  }

  parseCSVData(csvText) {
    return new Promise((resolve, reject) => {
      Papa.parse(csvText, {
        header: true,
        skipEmptyLines: true,
        complete: (results) => {
          if (results.errors.length > 0) {
            reject(new Error('CSV parsing failed: ' + results.errors[0].message));
          } else {
            resolve(results.data);
          }
        },
        error: (error) => {
          reject(error);
        }
      });
    });
  }

  // Convert date string to Day of Year (DOY) - Python compatible
  getDayOfYear(dateString) {
    const date = new Date(dateString);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ –∏ –≤ Python: date.timetuple().tm_yday
    const start = new Date(date.getFullYear(), 0, 1); // 1 —è–Ω–≤–∞—Ä—è
    const diff = date - start;
    const oneDay = 1000 * 60 * 60 * 24;
    return Math.floor(diff / oneDay) + 1; // +1 —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å Python tm_yday
  }

  // Filter data by city and day of year with ¬±5 day window (Python compatible)
  filterDataByCityAndDOY(data, cityName, dayOfYear, window = 5) {
    const filteredData = data.filter(record => {
      const recordCity = record.CITY || record.city || '';
      const recordDOY = parseInt(record.DOY || record.doy || 0);
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
      const normalizedRecordCity = this.normalizeCityNameForMatching(recordCity);
      const normalizedCityName = this.normalizeCityNameForMatching(cityName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      const cityMatch = this.isCityMatch(normalizedRecordCity, normalizedCityName);
      const doyMatch = recordDOY >= (dayOfYear - window) && recordDOY <= (dayOfYear + window);
      
      return cityMatch && doyMatch;
    });
    
    return filteredData;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  normalizeCityNameForMatching(cityName) {
    return cityName
      .toLowerCase()
      .replace(/_/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
      .replace(/[^a-zA-Z0-9\s]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
  isCityMatch(recordCity, targetCity) {
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (recordCity === targetCity) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–µ
    if (recordCity.includes(targetCity) || targetCity.includes(recordCity)) {
      return true;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const cityMappings = {
      'new york': ['new york city', 'nyc'],
      'mexico city': ['mexico'],
      'los angeles': ['la'],
      'buenos aires': ['buenos'],
      'haines junction': ['haines'],
      'puerto williams': ['puerto'],
      'port vila': ['port'],
      'nuku alofa': ['nuku'],
      'barrow utqiagvik': ['barrow', 'utqiagvik']
    };
    
    const lowerTargetCity = targetCity.toLowerCase();
    const lowerRecordCity = recordCity.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    for (const [key, variants] of Object.entries(cityMappings)) {
      if (lowerTargetCity === key) {
        for (const variant of variants) {
          if (lowerRecordCity.includes(variant) || variant.includes(lowerRecordCity)) {
            return true;
          }
        }
      }
    }
    
    return false;
  }

  // Get weather data for specific city and date with ¬±5 day window
  async getWeatherDataForDate(cityName, csvFileName = null, dateString, window = 5) {
    try {
      const allData = await this.loadCityData(cityName, csvFileName);
      const dayOfYear = this.getDayOfYear(dateString);
      const filteredData = this.filterDataByCityAndDOY(allData, cityName, dayOfYear, window);
      
      return {
        cityName,
        date: dateString,
        dayOfYear,
        window,
        data: filteredData,
        totalRecords: filteredData.length
      };
    } catch (error) {
      console.error(`Error getting weather data for ${cityName} on ${dateString}:`, error);
      throw error;
    }
  }


  // Clear cache (useful for testing or memory management)
  clearCache() {
    this.cache.clear();
  }
}

export default new NasaDataService();
